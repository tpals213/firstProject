<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC
"-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="userMapper">

	<resultMap type="User" id="resultUser">
		<result property="id" column="ID"/>
		<result property="userId" column="USER_ID"/>
		<result property="passWd" column="PASSWD"/>
		<result property="email" column="EMAIL"/>
		<result property="userNo" column="USER_NO"/>
		<result property="phone" column="PHONE"/>
		<result property="accountNumber" column="ACCOUNT_NUMBER"/>
		<result property="bankName" column="BANK_NAME"/>
		<result property="profileUrl" column="PROFILE_URL"/>
		<result property="isQuit" column="IS_QUIT"/>
		<result property="adminOk" column="ADMIN_OK"/>
		<result property="loginOk" column="LOGIN_OK"/>
		<result property="lastModified" column="LAST_MODIFIED"/>
		<result property="serviceDate" column="SERVICE_DATE"/>
		<result property="businessNo" column="BUSINESS_NO"/>
		<result property="businessStoreName" column="BUSINESS_STORE_NAME"/>
	</resultMap>
	
	<resultMap type="User" id="resultUserId">
		<result property="userId" column="USER_ID"/>
		<result property="lastModified" column="LAST_MODIFIED"/>
	</resultMap>
	
	<!-- 로그인용 쿼리 -->
	<select id="selectUserById" parameterType="string" resultMap="resultUser">
		SELECT * FROM TB_USER 
		WHERE USER_ID = #{userId}
	</select>
	
	<!-- 중복검사용 쿼리 -->
	<select id="selectUserCountById" parameterType="string" resultType="_int">
		SELECT COUNT(*) FROM TB_USER 
		WHERE USER_ID = #{userId}
	</select>

	<!-- 전체 유저 수 -->
	<select id="selectListCount" resultType="_int">
	select Count(*) FROM TB_USER
	</select>
	
	<!-- 페이지 전체유저 출력 -->
	<select id="selectList" parameterType="Paging" resultMap="resultUser">
		select * from (select rownum rnum, ID, USER_ID, USER_NO, LOGIN_OK, EMAIL,BUSINESS_STORE_NAME 
       					 from(select * from tb_user where admin_OK = 'N'
                       	 order by LAST_MODIFIED desc) )
	where rnum between #{startRow} and #{endRow}
	</select>
	
	<!-- 아이디 찾기 -->
	<select id = "selectUserIdByEmailBName" parameterType="User" resultMap="resultUserId">
		SELECT USER_ID, LAST_MODIFIED
		FROM TB_USER
		WHERE BUSINESS_STORE_NAME = #{businessStoreName}
		AND EMAIL = #{email}
	</select>
	
	<!-- 비밀번호 찾기 -->
	<select id = "selectUserByEmailId" parameterType="User" resultMap="resultUser">
		SELECT *
		FROM TB_USER
		WHERE USER_ID = #{userId}
		AND EMAIL = #{email}
	</select>
	
	<!-- ==================================== -->
	
	<!-- 회원가입용 쿼리 -->
	<insert id="insertUser" parameterType="User">
		INSERT INTO TB_USER (ID, USER_ID, PASSWD, EMAIL, USER_NO, PHONE, ACCOUNT_NUMBER, BANK_NAME, BUSINESS_NO, BUSINESS_STORE_NAME, IS_QUIT, ADMIN_OK, LOGIN_OK, LAST_MODIFIED, SERVICE_DATE) 
		VALUES (USER_SEQ.NEXTVAL, 
		#{userId}, #{passWd}, #{email},
		#{userNo}, #{phone}, #{accountNumber},
		#{bankName}, #{businessNo}, #{businessStoreName},
		DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT)
	</insert>
	
	<!-- 유저 정보 수정 쿼리 -->
	<update id="updateUser" parameterType="User">
		UPDATE TB_USER
			SET PASSWD = #{passWd}, EMAIL = EMAIL,
				PHONE = #{phone}, ACCOUNT_NUMBER = #{accountNumber},
				BANK_NAME = #{bankName}, PROFILE_URL = #{profileUrl},
				LAST_MODIFIED = SYSDATE, BUSINESS_NO = #{businessNo},
				BUSINESS_STORE_NAME = #{businessStoreName}
			WHERE USER_ID = #{userId}
	</update>
	
	<!-- 임시 비밀번호로 업데이트 -->
	<update id="updateUserPw" parameterType="User">
		UPDATE TB_USER
			SET PASSWD = #{passWd}
		WHERE USER_ID = #{userId}
	</update>
	
	<!-- 회원탈퇴로 인해 loginOk 'N'으로 업데이트 -->
	<update id="updateUserLoginOkToNByUserId" parameterType="string">
		UPDATE TB_USER 
			SET LOGIN_OK = 'N'
		WHERE USER_ID = #{userId} AND LOGIN_OK = 'Y'
	</update>
	
	<!-- 회원탈퇴로 인해 UserFinkOut에 유저 추가 -->
	<insert id="insertUserFinkOut" parameterType="UserFinkOut">
		INSERT INTO TB_USER_FINKOUT VALUES(
		#{finkOutNo}, #{fUserId}, #{fEmail}, DEFAULT
		)
	</insert>

</mapper>